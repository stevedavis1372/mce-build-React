export type Event = (a: any) => any;

export interface IEvents {
  onFocusin?: Event;
  onFocusout?: Event;
  onClick?: Event;
  onDblclick?: Event;
  onMousedown?: Event;
  onMouseup?: Event;
  onMousemove?: Event;
  onMouseover?: Event;
  onBeforepaste?: Event;
  onPaste?: Event;
  onCut?: Event;
  onCopy?: Event;
  onSelectionchange?: Event;
  onMouseout?: Event;
  onMouseenter?: Event;
  onMouseleave?: Event;
  onKeydown?: Event;
  onKeypress?: Event;
  onKeyup?: Event;
  onContextmenu?: Event;
  onDragend?: Event;
  onDragover?: Event;
  onDraggesture?: Event;
  onDragdrop?: Event;
  onDrop?: Event;
  onDrag?: Event;
  onBeforeRenderUI?: Event;
  onSetAttrib?: Event;
  onPreInit?: Event;
  onPostRender?: Event;
  onInit?: Event;
  onDeactivate?: Event;
  onActivate?: Event;
  onNodeChange?: Event;
  onBeforeExecCommand?: Event;
  onExecCommand?: Event;
  onShow?: Event;
  onHide?: Event;
  onProgressState?: Event;
  onLoadContent?: Event;
  onSaveContent?: Event;
  onBeforeSetContent?: Event;
  onSetContent?: Event;
  onBeforeGetContent?: Event;
  onGetContent?: Event;
  onVisualAid?: Event;
  onRemove?: Event;
  onSubmit?: Event;
  onReset?: Event;
  onBeforeAddUndo?: Event;
  onAddUndo?: Event;
  onChange?: Event;
  onUndo?: Event;
  onRedo?: Event;
  onClearUndos?: Event;
  onObjectSelected?: Event;
  onObjectResizeStart?: Event;
  onObjectResized?: Event;
  onPreProcess?: Event;
  onPostProcess?: Event;
  onFocus?: Event;
  onBlur?: Event;
  onDirty?: Event;
}
